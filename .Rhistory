plot.width = 8
plot.height = 4
plot_clumpp_results(wd=wd, clumpp.data=clumpp.data, colors=colors, plot.name = plot.name, plot.type=plot.type, plot.width=plot.width, plot.height=plot.height)
# step 5: barplot
models = read.table("H:/NearLab/PhenoDelimit/example/sim_models.txt", header=TRUE)
wd = "H:/NearLab/PhenoDelimit/example/"
clumpp.wd = "H:/NearLab/PhenoDelimit/example/CLUMPP"
sample.names = (1:nrow(models))
sample.plot.groups = models$m1
sample.plot.groups.order = c(1,2,3,4)
sample.order = (nrow(models):1)
best.perc.var = 90
best.model.number = 1
plot.type = "png"
plot.width = 20
plot.height = 6
plot.name = "barplot_example"
colors = brewer.pal(n = 5, name = "Set1")
border.color = "gray"
assign_probs_barplot(wd = wd, clumpp.wd = clumpp.wd, sample.names = sample.names,
sample.plot.groups = sample.plot.groups, sample.plot.groups.order = sample.plot.groups.order,
#sample.order = sample.order,
best.perc.var = best.perc.var, best.model.number = best.model.number,
plot.type = plot.type, plot.width = plot.width, plot.height = plot.height,
plot.name = plot.name, colors = colors, border.color = border.color)
models = read.table("H:/NearLab/PhenoDelimit/example/sim_models.txt", header=TRUE)
wd = "H:/NearLab/PhenoDelimit/example/"
clumpp.wd = "H:/NearLab/PhenoDelimit/example/CLUMPP"
sample.plot.groups = models$m1
sample.plot.groups.order = c(1,2,3,4)
sample.order = (nrow(models):1)
best.perc.var = 90
best.model.number = 1
plot.type = "png"
plot.width = 6
plot.height = 6
plot.name = "scatter_plot_example"
colors = brewer.pal(n = 5, name = "Set1")
border.color = "gray"
shapes=c(1:4)
x.axis=1
y.axis=2
plot_discriminant_axes(wd = wd, clumpp.wd = clumpp.wd,
sample.plot.groups = sample.plot.groups, sample.plot.groups.order = sample.plot.groups.order,
best.perc.var = best.perc.var, best.model.number = best.model.number,
plot.type = plot.type, plot.width = plot.width, plot.height = plot.height,
plot.name = plot.name, colors = colors, shapes = shapes,
x.axis = x.axis, y.axis = y.axis)
wd = "H:/NearLab/PhenoDelimit/example/"
clumpp.wd = "H:/NearLab/PhenoDelimit/example/CLUMPP"
best.perc.var = 90
best.model.number = 1
plot.type = "png"
plot.width = 6
plot.height = 6
axis=1
discriminant_loading(wd = wd, clumpp.wd = clumpp.wd,
best.perc.var = best.perc.var, best.model.number = best.model.number,
plot.type = plot.type, plot.width = plot.width, plot.height = plot.height, axis = axis)
library(RColorBrewer)
# step 1: K-means clustering, discriminant analysis, and prep files for CLUMPP
# data were generated using simulate_data.R
wd = "H:/NearLab/PhenoDelimit/example/CLUMPP"
data = read.table("H:/NearLab/PhenoDelimit/example/sim_data.txt", header=TRUE)
n.groups = c(4,2,3,5,5,4)
model.numbers = c(1:6)
models = read.table("H:/NearLab/PhenoDelimit/example/sim_models.txt", header=TRUE)
perc.var = c(70,80,90)
scale = TRUE
center = TRUE
clumpp_prep(wd=wd, data=data, n.groups=n.groups, model.numbers=model.numbers, models=models, perc.var=perc.var, scale=scale, center=center)
library(PhenoDelimit)
library(RColorBrewer)
# step 1: K-means clustering, discriminant analysis, and prep files for CLUMPP
# data were generated using simulate_data.R
wd = "H:/NearLab/PhenoDelimit/example/CLUMPP"
data = read.table("H:/NearLab/PhenoDelimit/example/sim_data.txt", header=TRUE)
n.groups = c(4,2,3,5,5,4)
model.numbers = c(1:6)
models = read.table("H:/NearLab/PhenoDelimit/example/sim_models.txt", header=TRUE)
perc.var = c(70,80,90)
scale = TRUE
center = TRUE
clumpp_prep(wd=wd, data=data, n.groups=n.groups, model.numbers=model.numbers, models=models, perc.var=perc.var, scale=scale, center=center)
?cat
library(PhenoDelimit)
library(RColorBrewer)
# step 1: K-means clustering, discriminant analysis, and prep files for CLUMPP
# data were generated using simulate_data.R
wd = "H:/NearLab/PhenoDelimit/example/CLUMPP"
data = read.table("H:/NearLab/PhenoDelimit/example/sim_data.txt", header=TRUE)
n.groups = c(4,2,3,5,5,4)
model.numbers = c(1:6)
models = read.table("H:/NearLab/PhenoDelimit/example/sim_models.txt", header=TRUE)
perc.var = c(70,80,90)
scale = TRUE
center = TRUE
clumpp_prep(wd=wd, data=data, n.groups=n.groups, model.numbers=model.numbers, models=models, perc.var=perc.var, scale=scale, center=center)
library(PhenoDelimit)
library(RColorBrewer)
# step 1: K-means clustering, discriminant analysis, and prep files for CLUMPP
# data were generated using simulate_data.R
wd = "H:/NearLab/PhenoDelimit/example/CLUMPP"
data = read.table("H:/NearLab/PhenoDelimit/example/sim_data.txt", header=TRUE)
n.groups = c(4,2,3,5,5,4)
model.numbers = c(1:6)
models = read.table("H:/NearLab/PhenoDelimit/example/sim_models.txt", header=TRUE)
perc.var = c(70,80,90)
scale = TRUE
center = TRUE
dapc_clumpp(wd=wd, data=data, n.groups=n.groups, model.numbers=model.numbers, models=models, perc.var=perc.var, scale=scale, center=center)
warnings()
setwd(wd)
getwd()
f <- paste("m", 1, "_perVar-", 70, ".paramfile", sep="")
f
system2(paste("CLUMPP", f, sep=" "))
system(paste("CLUMPP", f, sep=" "))
Sys.which("copy")
Sys.which("ping")
shell(paste("CLUMPP", f, sep=" "))
paste("CLUMPP", f, sep=" ")
shell(paste("CLUMPP.exe", f, sep=" "))
system(paste("CLUMPP.exe", f, sep=" "))
shell(paste("C:\CLUMPP_Windows.1.1.2\CLUMPP.exe", f, sep=" "))
shell(paste("C:/CLUMPP_Windows.1.1.2/CLUMPP.exe", f, sep=" "))
shell(paste("./CLUMPP.exe", f, sep=" "))
shell(paste("CLUMPP.exe", f, sep=" "))
library(PhenoDelimit)
# step 1: K-means clustering, discriminant analysis, and prep files for CLUMPP
# requires that CLUMPP executable is in the global path
# data were generated using simulate_data.R
wd = "H:/NearLab/PhenoDelimit/example/CLUMPP"
data = read.table("H:/NearLab/PhenoDelimit/example/sim_data.txt", header=TRUE)
n.groups = c(4,2,3,5,5,4)
model.numbers = c(1:6)
models = read.table("H:/NearLab/PhenoDelimit/example/sim_models.txt", header=TRUE)
perc.var = c(70,80,90)
scale = TRUE
center = TRUE
setwd(wd)
f <- paste("m", 1, "_perVar-", 70, ".paramfile", sep="")
shell(paste("CLUMPP", f, sep=" "))
library(PhenoDelimit)
library(PhenoDelimit)
library(PhenoDelimit)
library(RColorBrewer)
# step 1: K-means clustering, discriminant analysis, and prep files for CLUMPP
# requires that CLUMPP executable is in the global path
# data were generated using simulate_data.R
wd = "H:/NearLab/PhenoDelimit/example/CLUMPP"
data = read.table("H:/NearLab/PhenoDelimit/example/sim_data.txt", header=TRUE)
n.groups = c(4,2,3,5,5,4)
model.numbers = c(1:6)
models = read.table("H:/NearLab/PhenoDelimit/example/sim_models.txt", header=TRUE)
perc.var = c(70,80,90)
scale = TRUE
center = TRUE
dapc_clumpp(wd=wd, data=data, n.groups=n.groups, model.numbers=model.numbers, models=models, perc.var=perc.var, scale=scale, center=center)
warnings()
library(PhenoDelimit)
library(PhenoDelimit)
library(RColorBrewer)
# step 1: K-means clustering, discriminant analysis, and prep files for CLUMPP
# requires that CLUMPP executable is in the global path
# data were generated using simulate_data.R
wd = "H:/NearLab/PhenoDelimit/example/CLUMPP"
data = read.table("H:/NearLab/PhenoDelimit/example/sim_data.txt", header=TRUE)
n.groups = c(4,2,3,5,5,4)
model.numbers = c(1:6)
models = read.table("H:/NearLab/PhenoDelimit/example/sim_models.txt", header=TRUE)
perc.var = c(70,80,90)
scale = TRUE
center = TRUE
dapc_clumpp(wd=wd, data=data, n.groups=n.groups, model.numbers=model.numbers, models=models, perc.var=perc.var, scale=scale, center=center)
warnings()
# step 2: summarize CLUMPP
wd = "H:/NearLab/PhenoDelimit/example/CLUMPP"
model.numbers = c(1:6)
perc.var = c(70,80,90)
clumpp_results <- read_clumpp_results(wd=wd, perc.var=perc.var, model.numbers=model.numbers)
# step 3: plot H' values to compare delimitation models
wd = "H:/NearLab/PhenoDelimit/example/"
clumpp.data = clumpp_results
colors = brewer.pal(n = 3, name = "Set1")
plot.type = "png"
plot.name = "H_plot_example"
plot.width = 8
plot.height = 4
plot_clumpp_results(wd=wd, clumpp.data=clumpp.data, colors=colors, plot.name = plot.name, plot.type=plot.type, plot.width=plot.width, plot.height=plot.height)
# step 4: bar plots of discriminant analysis assignment probabilities
models = read.table("H:/NearLab/PhenoDelimit/example/sim_models.txt", header=TRUE)
wd = "H:/NearLab/PhenoDelimit/example/"
clumpp.wd = "H:/NearLab/PhenoDelimit/example/CLUMPP"
sample.names = (1:nrow(models))
sample.plot.groups = models$m1
sample.plot.groups.order = c(1,2,3,4)
sample.order = (nrow(models):1)
best.perc.var = 90
best.model.number = 1
plot.type = "png"
plot.width = 20
plot.height = 6
plot.name = "barplot_example"
colors = brewer.pal(n = 5, name = "Set1")
border.color = "gray"
assign_probs_barplot(wd = wd, clumpp.wd = clumpp.wd, sample.names = sample.names,
sample.plot.groups = sample.plot.groups, sample.plot.groups.order = sample.plot.groups.order,
#sample.order = sample.order,
best.perc.var = best.perc.var, best.model.number = best.model.number,
plot.type = plot.type, plot.width = plot.width, plot.height = plot.height,
plot.name = plot.name, colors = colors, border.color = border.color)
# step 5: scatter plot or density plot of discriminant axes
models = read.table("H:/NearLab/PhenoDelimit/example/sim_models.txt", header=TRUE)
wd = "H:/NearLab/PhenoDelimit/example/"
clumpp.wd = "H:/NearLab/PhenoDelimit/example/CLUMPP"
sample.plot.groups = models$m1
sample.plot.groups.order = c(1,2,3,4)
sample.order = (nrow(models):1)
best.perc.var = 90
best.model.number = 1
plot.type = "png"
plot.width = 6
plot.height = 6
plot.name = "scatter_plot_example"
colors = brewer.pal(n = 5, name = "Set1")
border.color = "gray"
shapes=c(1:4)
x.axis=1
y.axis=2
plot_discriminant_axes(wd = wd, clumpp.wd = clumpp.wd,
sample.plot.groups = sample.plot.groups, sample.plot.groups.order = sample.plot.groups.order,
best.perc.var = best.perc.var, best.model.number = best.model.number,
plot.type = plot.type, plot.width = plot.width, plot.height = plot.height,
plot.name = plot.name, colors = colors, shapes = shapes,
x.axis = x.axis, y.axis = y.axis)
# step 6: plot discriminant axis loadings and write to table
wd = "H:/NearLab/PhenoDelimit/example/"
clumpp.wd = "H:/NearLab/PhenoDelimit/example/CLUMPP"
best.perc.var = 90
best.model.number = 1
plot.type = "png"
plot.width = 6
plot.height = 6
axis=1
discriminant_loading(wd = wd, clumpp.wd = clumpp.wd,
best.perc.var = best.perc.var, best.model.number = best.model.number,
plot.type = plot.type, plot.width = plot.width, plot.height = plot.height, axis = axis)
wd = "H:/NearLab/PhenoDelimit/example/"
clumpp.wd = "H:/NearLab/PhenoDelimit/example/CLUMPP"
best.perc.var = 90
best.model.number = 1
plot.type = "png"
plot.width = 6
plot.height = 6
axis=1
discriminant_loading(wd = wd, clumpp.wd = clumpp.wd,
best.perc.var = best.perc.var, best.model.number = best.model.number,
plot.type = plot.type, plot.width = plot.width, plot.height = plot.height, axis = axis)
axis=2
discriminant_loading(wd = wd, clumpp.wd = clumpp.wd,
best.perc.var = best.perc.var, best.model.number = best.model.number,
plot.type = plot.type, plot.width = plot.width, plot.height = plot.height, axis = axis)
models = read.table("H:/NearLab/PhenoDelimit/example/sim_models.txt", header=TRUE)
wd = "H:/NearLab/PhenoDelimit/example/"
clumpp.wd = "H:/NearLab/PhenoDelimit/example/CLUMPP"
sample.plot.groups = models$m1
sample.plot.groups.order = c(1,2,3,4)
sample.order = (nrow(models):1)
best.perc.var = 90
best.model.number = 1
plot.type = "png"
plot.width = 6
plot.height = 6
plot.name = "scatter_plot_example"
colors = brewer.pal(n = 5, name = "Set1")
border.color = "gray"
shapes=c(1:4)
x.axis=3
y.axis=4
x.axis=1
y.axis=2
y.axis=3
plot_discriminant_axes(wd = wd, clumpp.wd = clumpp.wd,
sample.plot.groups = sample.plot.groups, sample.plot.groups.order = sample.plot.groups.order,
best.perc.var = best.perc.var, best.model.number = best.model.number,
plot.type = plot.type, plot.width = plot.width, plot.height = plot.height,
plot.name = plot.name, colors = colors, shapes = shapes,
x.axis = x.axis, y.axis = y.axis)
models = read.table("H:/NearLab/PhenoDelimit/example/sim_models.txt", header=TRUE)
wd = "H:/NearLab/PhenoDelimit/example/"
clumpp.wd = "H:/NearLab/PhenoDelimit/example/CLUMPP"
sample.plot.groups = models$m1
sample.plot.groups.order = c(1,2,3,4)
sample.order = (nrow(models):1)
best.perc.var = 90
best.model.number = 1
plot.type = "png"
plot.width = 6
plot.height = 6
colors = brewer.pal(n = 5, name = "Set1")
border.color = "gray"
shapes=c(1:4)
x.axis=1
y.axis=2
plot_discriminant_axes(wd = wd, clumpp.wd = clumpp.wd,
sample.plot.groups = sample.plot.groups, sample.plot.groups.order = sample.plot.groups.order,
best.perc.var = best.perc.var, best.model.number = best.model.number,
plot.type = plot.type, plot.width = plot.width, plot.height = plot.height,
colors = colors, shapes = shapes,
x.axis = x.axis, y.axis = y.axis)
library(PhenoDelimit)
models = read.table("H:/NearLab/PhenoDelimit/example/sim_models.txt", header=TRUE)
wd = "H:/NearLab/PhenoDelimit/example/"
clumpp.wd = "H:/NearLab/PhenoDelimit/example/CLUMPP"
sample.plot.groups = models$m1
sample.plot.groups.order = c(1,2,3,4)
sample.order = (nrow(models):1)
best.perc.var = 90
best.model.number = 1
plot.type = "png"
plot.width = 6
plot.height = 6
colors = brewer.pal(n = 5, name = "Set1")
border.color = "gray"
shapes=c(1:4)
x.axis=1
y.axis=2
plot_discriminant_axes(wd = wd, clumpp.wd = clumpp.wd,
sample.plot.groups = sample.plot.groups, sample.plot.groups.order = sample.plot.groups.order,
best.perc.var = best.perc.var, best.model.number = best.model.number,
plot.type = plot.type, plot.width = plot.width, plot.height = plot.height,
colors = colors, shapes = shapes,
x.axis = x.axis, y.axis = y.axis)
y.axis=3
plot_discriminant_axes(wd = wd, clumpp.wd = clumpp.wd,
sample.plot.groups = sample.plot.groups, sample.plot.groups.order = sample.plot.groups.order,
best.perc.var = best.perc.var, best.model.number = best.model.number,
plot.type = plot.type, plot.width = plot.width, plot.height = plot.height,
colors = colors, shapes = shapes,
x.axis = x.axis, y.axis = y.axis)
wd = "H:/NearLab/PhenoDelimit/example/"
clumpp.wd = "H:/NearLab/PhenoDelimit/example/CLUMPP"
best.perc.var = 90
best.model.number = 1
plot.type = "png"
plot.width = 6
plot.height = 6
axis=1
discriminant_loading(wd = wd, clumpp.wd = clumpp.wd,
best.perc.var = best.perc.var, best.model.number = best.model.number,
plot.type = plot.type, plot.width = plot.width, plot.height = plot.height, axis = axis)
axis=2
discriminant_loading(wd = wd, clumpp.wd = clumpp.wd,
best.perc.var = best.perc.var, best.model.number = best.model.number,
plot.type = plot.type, plot.width = plot.width, plot.height = plot.height, axis = axis)
axis=3
discriminant_loading(wd = wd, clumpp.wd = clumpp.wd,
best.perc.var = best.perc.var, best.model.number = best.model.number,
plot.type = plot.type, plot.width = plot.width, plot.height = plot.height, axis = axis)
wd = "H:/NearLab/PhenoDelimit/example/"
clumpp.data = clumpp_results
colors = c("gray", "darkgray", "black")
plot.type = "png"
plot.name = "H_plot_example"
plot.width = 8
plot.height = 4
plot_clumpp_results(wd=wd, clumpp.data=clumpp.data, colors=colors, plot.name = plot.name, plot.type=plot.type, plot.width=plot.width, plot.height=plot.height)
# step 3: plot H' values to compare delimitation models
wd = "H:/NearLab/PhenoDelimit/example/"
clumpp.data = clumpp_results
colors = c("gray80", "gray30", "black")
plot.type = "png"
plot.name = "H_plot_example"
plot.width = 8
plot.height = 4
plot_clumpp_results(wd=wd, clumpp.data=clumpp.data, colors=colors, plot.name = plot.name, plot.type=plot.type, plot.width=plot.width, plot.height=plot.height)
# step 3: plot H' values to compare delimitation models
wd = "H:/NearLab/PhenoDelimit/example/"
clumpp.data = clumpp_results
colors = c("gray70", "gray30", "black")
plot.type = "png"
plot.name = "H_plot_example"
plot.width = 8
plot.height = 4
plot_clumpp_results(wd=wd, clumpp.data=clumpp.data, colors=colors, plot.name = plot.name, plot.type=plot.type, plot.width=plot.width, plot.height=plot.height)
# plot the variables
for(i in 1:nVar){
plot(sim_data$cluster, sim_data[,i])
}
library(ggplot2)
# working directory
wd = "H:/NearLab/PhenoDelimit/example"
# read data if already created
setwd(wd)
sim_data <- read.table(file = "sim_data.txt", header=TRUE)
str(sim_data)
sim_data$grp <- read.table(file = "sim_models.txt", header=TRUE)[,1]
str(sim_data)
# how many clusters to generate?
true_clust = 4
# how many samples total?
samples = 300
# how many variables to generate?
nVar = 20
# small variable sd values
var_sd_min_small = 0.5
var_sd_max_small = 1
# large variable sd values
var_sd_min_large = 3
var_sd_max_large = 10
# large range of variable mean values
var_mean_min_large = 5
var_mean_max_large = 30
# small range of variable mean values
var_mean_min_small = 18
var_mean_max_small = 22
# plot data
for(i in 1:nVar){
plot(sim_data$grp, sim_data[,i])
}
library(reshape2)
melt(sim_data, id.vars = "grp")
sim_data_melt <- melt(sim_data, id.vars = "grp")
str(sim_data_melt)
?facet_grid
p <- ggplot(sim_data_melt, aes(x=grp, y=value, group=variable)) +
geom_boxplot(aes(fill=grp))
p
p <- ggplot(sim_data_melt, aes(x=grp, y=value, group=grp)) +
geom_boxplot(aes(fill=grp)) +
facet_grid(. ~ variable)
p
sim_data <- read.table(file = "sim_data.txt", header=TRUE)
# read data if already created
setwd(wd)
sim_data <- read.table(file = "sim_data.txt", header=TRUE)
sim_data$grp <- as.factor(read.table(file = "sim_models.txt", header=TRUE)[,1])
sim_data_melt <- melt(sim_data, id.vars = "grp")
p <- ggplot(sim_data_melt, aes(x=grp, y=value, group=grp)) +
geom_boxplot(aes(fill=grp)) +
facet_grid(. ~ variable)
p
library(RColorBrewer)
p <- ggplot(sim_data_melt, aes(x=grp, y=value, group=grp)) +
geom_boxplot(aes(fill=grp)) +
scale_fill_manual(values = brewer.pal(n = 5, name = "Set1"))
p <- ggplot(sim_data_melt, aes(x=grp, y=value, group=grp)) +
geom_boxplot(aes(fill=grp)) +
scale_fill_manual(values = brewer.pal(n = 5, name = "Set1")) +
facet_grid(. ~ variable)
p
?facet_grid
p <- ggplot(sim_data_melt, aes(x=grp, y=value, group=grp)) +
geom_boxplot(aes(fill=grp)) +
scale_fill_manual(values = brewer.pal(n = 5, name = "Set1")) +
facet_grid(. ~ variable, rows=2, cols=10)
p
p <- ggplot(sim_data_melt, aes(x=grp, y=value, group=grp)) +
geom_boxplot(aes(fill=grp)) +
scale_fill_manual(values = brewer.pal(n = 5, name = "Set1")) +
facet_grid(. ~ variable, rows=2, cols=10) +
theme_minimal
p
p <- ggplot(sim_data_melt, aes(x=grp, y=value, group=grp)) +
geom_boxplot(aes(fill=grp)) +
scale_fill_manual(values = brewer.pal(n = 5, name = "Set1"), name="Group") +
facet_grid(. ~ variable, rows=2, cols=10) +
theme_minimal
p
?scale_fill_manual
p <- ggplot(sim_data_melt, aes(x=grp, y=value, group=grp)) +
geom_boxplot(aes(fill=grp)) +
scale_fill_manual(values = brewer.pal(n = 5, name = "Set1"), name="Group") +
facet_grid(~ variable, rows=2, cols=10) +
theme_minimal
p
p <- ggplot(sim_data_melt, aes(x=grp, y=value, group=grp)) +
geom_boxplot(aes(fill=grp)) +
scale_fill_manual(values = brewer.pal(n = 5, name = "Set1"), name="Group") +
facet_grid(~ variable, nrow=2, ncol=10) +
theme_minimal
p
?facet_grid
p <- ggplot(sim_data_melt, aes(x=grp, y=value, group=grp)) +
geom_boxplot(aes(fill=grp)) +
scale_fill_manual(values = brewer.pal(n = 5, name = "Set1"), name="Group") +
facet_wrap(~ variable, nrow=2, ncol=10) +
theme_minimal
p
p <- ggplot(sim_data_melt, aes(x=grp, y=value, group=grp)) +
geom_boxplot(aes(fill=grp)) +
scale_fill_manual(values = brewer.pal(n = 5, name = "Set1"), name="Group") +
facet_wrap(~ variable, nrow=2, ncol=10) +
theme_minimal()
p
p <- ggplot(sim_data_melt, aes(x=grp, y=value, group=grp)) +
geom_boxplot(aes(fill=grp)) +
scale_fill_manual(values = brewer.pal(n = 5, name = "Set1"), name="Group") +
facet_wrap(~ variable, nrow=2, ncol=10) +
theme_light()
p
getwd()
png(filename = "sim_data_boxplots.png", width=8, height=6)
p
dev.off()
png(filename = "sim_data_boxplots.png", width=8, height=6, units = "in", res = 300)
p
dev.off()
png(filename = "sim_data_boxplots.png", width=10, height=6, units = "in", res = 300)
p
dev.off()
