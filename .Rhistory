library(PhenoDelimit)
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
library(PhenoDelimit)
library(devtools)
install_github("dmacguigan/gdiPipeline")
install_github("dmacguigan/gdiPipeline", force=TRUE)
library(PhenoDelimit)
library(PhenoDelimit)
library(PhenoDelimit)
?clumpp_prep
wd = "H:/NearLab/PhenoClust/example/CLUMPP"
data = read.table("H:/NearLab/PhenoClust/example/sim_data.txt", header=TRUE)
n.groups = c(4,2,3,5,5,4)
model.numbers = c(1:6)
models = read.table("H:/NearLab/PhenoClust/example/sim_models.txt", header=TRUE)
perc.var = c(70,80,90)
scale = TRUE
center = TRUE
# step 1: K-means clustering, discriminant analysis, and prep files for CLUMPP
wd = "H:/NearLab/PhenoDelimit/example/CLUMPP"
data = read.table("H:/NearLab/PhenoDelimit/example/sim_data.txt", header=TRUE)
n.groups = c(4,2,3,5,5,4)
model.numbers = c(1:6)
models = read.table("H:/NearLab/PhenoDelimit/example/sim_models.txt", header=TRUE)
perc.var = c(70,80,90)
scale = TRUE
center = TRUE
clumpp_prep(wd=wd, data=data, n.groups=n.groups, model.numbers=model.numbers, models=models, perc.var=perc.var, scale=scale, center=center)
# step 3: summarize CLUMPP
wd = "H:/NearLab/PhenoDelimit/example/CLUMPP"
model.numbers = c(1:6)
perc.var = c(70,80,90)
clumpp_results <- read_clumpp_results(wd=wd, perc.var=perc.var, model.numbers=model.numbers)
# step 4: plot H' values to compare delimitation models
wd = "H:/NearLab/PhenoDelimit/example/"
clumpp.data = clumpp_results
colors = brewer.pal(n = 3, name = "Set1")
plot.type = "pdf"
plot.width = 8
plot.height = 4
plot_clumpp_results(wd=wd, clumpp.data=clumpp.data, colors=colors, plot.type=plot.type, plot.width=plot.width, plot.height=plot.height)
library(RColorBrewer)
library(PhenoDelimit)
library(PhenoDelimit)
brewer.pal
?brewer.pal
colors = brewer.pal(n = 3, name = "Set1")
wd = "H:/NearLab/PhenoDelimit/example/CLUMPP"
model.numbers = c(1:6)
perc.var = c(70,80,90)
clumpp_results <- read_clumpp_results(wd=wd, perc.var=perc.var, model.numbers=model.numbers)
# step 4: plot H' values to compare delimitation models
wd = "H:/NearLab/PhenoDelimit/example/"
clumpp.data = clumpp_results
colors = brewer.pal(n = 3, name = "Set1")
plot.type = "pdf"
plot.width = 8
plot.height = 4
plot_clumpp_results(wd=wd, clumpp.data=clumpp.data, colors=colors, plot.type=plot.type, plot.width=plot.width, plot.height=plot.height)
# step 5: barplot
models = read.table("H:/NearLab/PhenoDelimit/example/sim_models.txt", header=TRUE)
wd = "H:/NearLab/PhenoDelimit/example/"
clumpp.wd = "H:/NearLab/PhenoDelimit/example/CLUMPP"
sample.names = (1:nrow(models))
sample.plot.groups = models$m4
sample.plot.groups.order = c(1,2,3,4,5)
sample.order = (nrow(models):1)
best.perc.var = 90
best.model.number = 4
plot.type = "pdf"
plot.width = 8
plot.height = 6
plot.name = "test"
colors = brewer.pal(n = 5, name = "Set1")
border.color = "gray"
assignProbs_barplot(wd = wd, clumpp.wd = clumpp.wd, sample.names = sample.names,
sample.plot.groups = sample.plot.groups, sample.plot.groups.order = sample.plot.groups.order,
#sample.order = sample.order,
best.perc.var = best.perc.var, best.model.number = best.model.number,
plot.type = plot.type, plot.width = plot.width, plot.height = plot.height,
plot.name = plot.name, colors = colors, border.color = border.color)
wd = "H:/NearLab/PhenoDelimit/example/"
clumpp.wd = "H:/NearLab/PhenoDelimit/example/CLUMPP"
sample.names = (1:nrow(models))
sample.plot.groups = models$m1
sample.plot.groups.order = c(1,2,3,4)
sample.order = (nrow(models):1)
best.perc.var = 90
best.model.number = 1
plot.type = "pdf"
plot.width = 8
plot.height = 6
plot.name = "test"
colors = brewer.pal(n = 5, name = "Set1")
border.color = "gray"
assignProbs_barplot(wd = wd, clumpp.wd = clumpp.wd, sample.names = sample.names,
sample.plot.groups = sample.plot.groups, sample.plot.groups.order = sample.plot.groups.order,
#sample.order = sample.order,
best.perc.var = best.perc.var, best.model.number = best.model.number,
plot.type = plot.type, plot.width = plot.width, plot.height = plot.height,
plot.name = plot.name, colors = colors, border.color = border.color)
