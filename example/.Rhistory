}
curMigMatNum=he.migrMat
#Output current valid migration matrix
if (i%%2) {
slide=migrOffset
}
else {
slide=-migrOffset
}
if (he.migrMat>-1) {
migText=he.migrMat
curCex=migMatNameProp
} else {
migText="nomig"
curCex=migMatNameProp/2
slide=slide*2
}
text(0+slide, time2DrawArrows, labels=migText, cex=curCex, col=migrMatCol)
lastSink=he.sink
}
}
#-- Draw last branch
segments(activePops[1],topOfCircle[activePops[1]], activePops[1], yTimeLimit)
#==============================   PLOT LEGENDS IN MARGINS   ========================
#Compute space available in margin
minY.coo=grconvertY(0, from="nic", to="user")
par(xpd=NA)
#--- Draw population size scale with circles of different sizes .................
maxOrder=ceiling(log10(maxPopSize))
minOrder=floor(log10(minPopSize))
popSizeRadius=10^(maxOrder:minOrder)
winWidth=numSamples+2
ypos=3/4*minY.coo
text(x=-winWidth/10*1.2, y=ypos, labels="Pop. \nsizes ", cex=.8, pos=2)
for (i in 1:length(popSizeRadius)) {
curRadius=interpolRadius(popSizeRadius[i], minPopSize, maxPopSize, minRadius, maxRadius, drawLogPopSize)
#   print(curRadius)
if (curRadius>0) {
xpos=-winWidth/10+(i-1)*winWidth/10
draw.circle(xpos, ypos, radius=curRadius, col=popCol, border=popBorderCol)
}
text(xpos, ypos-abs(ypos)*0.1, popSizeRadius[i], cex=0.7, pos=1, col="black")
}
#--- Legend for growing or shrinking populations ...............................
if (isGrowth) {
x=winWidth-1.5*winWidth/10; y=ypos+abs(ypos)*0.2
text(x, y-abs(ypos)*0.1, labels="Populations", cex=0.8)
x=winWidth-2*winWidth/10; y=ypos-abs(ypos)*0.1
drawTriangle(1, x, y, size=0.15, aspRatio, color=growthCol)
text(x, y-abs(ypos)*0.1, labels="growing", pos=NULL, cex=0.7)
x=winWidth-winWidth/10
drawTriangle(-1, x, y, size=0.15, aspRatio, color=growthCol)
text(x, y-abs(ypos)*0.1, labels="shrinking", pos=NULL, cex=0.7)
}
if (printPDF) dev.off()
log10(exp(1))
library(adegenet)
sessionInfo()
?find.clusters
?snapclust
library(riverdist)
?snapclust
sessionInfo()
citation(package="riverdist")
?hzar.doChain.multi
library(hzar)
?hzar.doChain.multi
install.packages("Rcpp")
install.packages("ape")
sessionInfo()
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
library(devtools)
install_github("dmacguigan/PhenoDelimit")
library(devtools)
install_github("dmacguigan/PhenoDelimit")
library(devtools)
install_github("dmacguigan/PhenoDelimit")
library(PhenoDelimit)
?clumpp_prep
?read_CLUMPP_results
?read_clumpp_results
library(ggplot2)
# working directory
wd = "H:/NearLab/PhenoDelimit/example"
# how many clusters to generate?
true_clust = 4
# how many samples total?
samples = 300
# how many variables to generate?
nVar = 20
# normal distribution sd range
var_sd_min = 1
var_sd_max = 10
# variable normal distribution mean min and max, LARGE DIFF
var_mean_min_large = 5
var_mean_max_large = 30
# variable normal distribution mean min and max, SMALL DIFF
var_mean_min_small = 18
var_mean_max_small = 22
# generate variable normal distribution means
temp <- list()
for(i in 1:10){
temp[[i]] <- runif(nVar, var_mean_min, var_mean_max) # choose random value from uniform distribution between var_mean_min and var_mean_max
}
for(i in 11:true_clust){
temp[[i]] <- runif(nVar, var_mean_min, var_mean_max) # choose random value from uniform distribution between var_mean_min and var_mean_max
}
var_means <- as.data.frame(do.call(rbind, temp))
library(ggplot2)
# working directory
wd = "H:/NearLab/PhenoDelimit/example"
# how many clusters to generate?
true_clust = 4
# how many samples total?
samples = 300
# how many variables to generate?
nVar = 20
# normal distribution sd range
var_sd_min = 1
var_sd_max = 10
# variable normal distribution mean min and max, LARGE DIFF
var_mean_min_large = 5
var_mean_max_large = 30
# variable normal distribution mean min and max, SMALL DIFF
var_mean_min_small = 18
var_mean_max_small = 22
# generate variable normal distribution means
temp <- list()
for(i in 1:10){
temp[[i]] <- runif(nVar, var_mean_min_large, var_mean_max_large) # choose random value from uniform distribution between var_mean_min and var_mean_max
}
for(i in 11:true_clust){
temp[[i]] <- runif(nVar, var_mean_min_small, var_mean_max_small) # choose random value from uniform distribution between var_mean_min and var_mean_max
}
var_means <- as.data.frame(do.call(rbind, temp))
var_sds <- runif(nVar, var_sd_min, var_sd_max) # choose random value from uniform distribution between var_sd_min and var_sd_max
# generate draws from normal distribution for each sample
sim_data <- data.frame()
# for each sample
for(i in 1:samples){
sim_clust = sample(1:true_clust, 1) # choose a random cluster
sim_data[i,1] <- sim_clust
for(j in 1:nVar){
sim_data[i,j+1] <-rnorm(1, mean=var_means[sim_clust,j], sd=var_sds[j]) # generate draw from normal distribution of approporate cluster
}
}
colnames(sim_data) <- c("cluster", paste("var", c(1:nVar), sep=""))
# quick plot of one variable
plot(sim_data$cluster, sim_data$var2)
# quick plot of one variable
plot(sim_data$cluster, sim_data$var11)
# quick plot of one variable
plot(sim_data$cluster, sim_data$var1)
# quick plot of one variable
plot(sim_data$cluster, sim_data$var2)
# quick plot of one variable
plot(sim_data$cluster, sim_data$var3)
# quick plot of one variable
plot(sim_data$cluster, sim_data$var15)
# quick plot of one variable
plot(sim_data$cluster, sim_data$var11)
# quick plot of one variable
plot(sim_data$cluster, sim_data$var12)
# working directory
wd = "H:/NearLab/PhenoDelimit/example"
# how many clusters to generate?
true_clust = 4
# how many samples total?
samples = 300
# how many variables to generate?
nVar = 20
# normal distribution sd range
var_sd_min = 1
var_sd_max = 10
# variable normal distribution mean min and max, LARGE DIFF
var_mean_min_large = 5
var_mean_max_large = 30
# variable normal distribution mean min and max, SMALL DIFF
var_mean_min_small = 20
var_mean_max_small = 20
# generate variable normal distribution means
temp <- list()
for(i in 1:10){
temp[[i]] <- runif(nVar, var_mean_min_large, var_mean_max_large) # choose random value from uniform distribution between var_mean_min and var_mean_max
}
for(i in 11:true_clust){
temp[[i]] <- runif(nVar, var_mean_min_small, var_mean_max_small) # choose random value from uniform distribution between var_mean_min and var_mean_max
}
var_means <- as.data.frame(do.call(rbind, temp))
# generate variable normal distribution standard deviations, use same sd for each variable
var_sds <- runif(nVar, var_sd_min, var_sd_max) # choose random value from uniform distribution between var_sd_min and var_sd_max
# generate draws from normal distribution for each sample
sim_data <- data.frame()
# for each sample
for(i in 1:samples){
sim_clust = sample(1:true_clust, 1) # choose a random cluster
sim_data[i,1] <- sim_clust
for(j in 1:nVar){
sim_data[i,j+1] <-rnorm(1, mean=var_means[sim_clust,j], sd=var_sds[j]) # generate draw from normal distribution of approporate cluster
}
}
colnames(sim_data) <- c("cluster", paste("var", c(1:nVar), sep=""))
# quick plot of one variable
plot(sim_data$cluster, sim_data$var12)
# quick plot of one variable
plot(sim_data$cluster, sim_data$var13)
# quick plot of one variable
plot(sim_data$cluster, sim_data$var20)
var_means
# generate variable normal distribution means
temp <- list()
for(i in 1:10){
temp[[i]] <- runif(nVar, var_mean_min_large, var_mean_max_large) # choose random value from uniform distribution between var_mean_min and var_mean_max
}
temp
for(i in 11:true_clust){
temp[[i]] <- runif(nVar, var_mean_min_small, var_mean_max_small) # choose random value from uniform distribution between var_mean_min and var_mean_max
}
var_means <- as.data.frame(do.call(rbind, temp))
var_means
# generate variable normal distribution means
temp <- list()
for(i in 1:true_clust){
temp[[i]] <- runif(nVar, var_mean_min_large, var_mean_max_large) # choose random value from uniform distribution between var_mean_min and var_mean_max
}
var_means <- as.data.frame(do.call(rbind, temp))
var_means
# generate variable normal distribution means
temp <- list()
for(i in 1:true_clust){
temp_small[[i]] <- runif(10, var_mean_min_large, var_mean_max_large) # choose random value from uniform distribution between var_mean_min and var_mean_max
}
for(i in 1:true_clust){
temp_large[[i]] <- runif(10, var_mean_min_small, var_mean_max_small) # choose random value from uniform distribution between var_mean_min and var_mean_max
}
# generate variable normal distribution means
temp_small <- list()
temp_large <- list()
for(i in 1:true_clust){
temp_small[[i]] <- runif(10, var_mean_min_large, var_mean_max_large) # choose random value from uniform distribution between var_mean_min and var_mean_max
}
for(i in 1:true_clust){
temp_large[[i]] <- runif(10, var_mean_min_small, var_mean_max_small) # choose random value from uniform distribution between var_mean_min and var_mean_max
}
temp_small
var_means <- as.data.frame(do.call(rbind, temp_small))
var_means
var_means_small <- as.data.frame(do.call(rbind, temp_small))
var_means_large <- as.data.frame(do.call(rbind, temp_large))
var_means_large
rbind(var_means_small, var_means_large)
cbind(var_means_small, var_means_large)
library(ggplot2)
# working directory
wd = "H:/NearLab/PhenoDelimit/example"
# how many clusters to generate?
true_clust = 4
# how many samples total?
samples = 300
# how many variables to generate?
nVar = 20
# normal distribution sd range
var_sd_min = 1
var_sd_max = 10
# variable normal distribution mean min and max, LARGE DIFF
var_mean_min_large = 5
var_mean_max_large = 30
# variable normal distribution mean min and max, SMALL DIFF
var_mean_min_small = 20
var_mean_max_small = 20
# generate variable normal distribution means
temp_small <- list()
temp_large <- list()
for(i in 1:true_clust){
temp_small[[i]] <- runif(10, var_mean_min_large, var_mean_max_large) # choose random value from uniform distribution between var_mean_min and var_mean_max
}
for(i in 1:true_clust){
temp_large[[i]] <- runif(10, var_mean_min_small, var_mean_max_small) # choose random value from uniform distribution between var_mean_min and var_mean_max
}
var_means_small <- as.data.frame(do.call(rbind, temp_small))
var_means_large <- as.data.frame(do.call(rbind, temp_large))
var_means <- cbind(var_means_small, var_means_large)
var_means
var_sds <- runif(nVar, var_sd_min, var_sd_max) # choose random value from uniform distribution between var_sd_min and var_sd_max
# generate draws from normal distribution for each sample
sim_data <- data.frame()
# for each sample
for(i in 1:samples){
sim_clust = sample(1:true_clust, 1) # choose a random cluster
sim_data[i,1] <- sim_clust
for(j in 1:nVar){
sim_data[i,j+1] <-rnorm(1, mean=var_means[sim_clust,j], sd=var_sds[j]) # generate draw from normal distribution of approporate cluster
}
}
colnames(sim_data) <- c("cluster", paste("var", c(1:nVar), sep=""))
# quick plot of one variable
plot(sim_data$cluster, sim_data$var20)
# quick plot of one variable
plot(sim_data$cluster, sim_data$var10)
# quick plot of one variable
plot(sim_data$cluster, sim_data$var11)
# quick plot of one variable
plot(sim_data$cluster, sim_data$var15)
# quick plot of one variable
plot(sim_data$cluster, sim_data$var2)
# generate variable normal distribution means
temp_small <- list()
temp_large <- list()
for(i in 1:true_clust){
temp_small[[i]] <- runif(10, var_mean_min_large, var_mean_max_large) # choose random value from uniform distribution between var_mean_min and var_mean_max
}
for(i in 1:true_clust){
temp_large[[i]] <- runif(10, var_mean_min_small, var_mean_max_small) # choose random value from uniform distribution between var_mean_min and var_mean_max
}
var_means_small <- as.data.frame(do.call(rbind, temp_small))
var_means_large <- as.data.frame(do.call(rbind, temp_large))
var_means <- cbind(var_means_small, var_means_large)
var_means
temp_small <- list()
temp_large <- list()
for(i in 1:true_clust){
temp_large[[i]] <- runif(10, var_mean_min_large, var_mean_max_large) # choose random value from uniform distribution between var_mean_min and var_mean_max
}
for(i in 1:true_clust){
temp_small[[i]] <- runif(10, var_mean_min_small, var_mean_max_small) # choose random value from uniform distribution between var_mean_min and var_mean_max
}
var_means_small <- as.data.frame(do.call(rbind, temp_small))
var_means_large <- as.data.frame(do.call(rbind, temp_large))
var_means <- cbind(var_means_large, var_means_small)
var_means
wd = "H:/NearLab/PhenoDelimit/example"
# how many clusters to generate?
true_clust = 4
# how many samples total?
samples = 300
# how many variables to generate?
nVar = 20
# small variable sd values
var_sd_min_small = 0.5
var_sd_max_small = 3
# large variable sd values
var_sd_min_large = 3
var_sd_max_large = 10
# large range of variable mean values
var_mean_min_large = 5
var_mean_max_large = 30
# small range of variable mean values
var_mean_min_small = 18
var_mean_max_small = 22
# generate variable normal distribution means
temp_small <- list()
temp_large <- list()
for(i in 1:true_clust){
temp_large[[i]] <- runif(10, var_mean_min_large, var_mean_max_large) # choose random value from uniform distribution between var_mean_min and var_mean_max
}
for(i in 1:true_clust){
temp_small[[i]] <- runif(10, var_mean_min_small, var_mean_max_small) # choose random value from uniform distribution between var_mean_min and var_mean_max
}
var_means_small <- as.data.frame(do.call(rbind, temp_small))
var_means_large <- as.data.frame(do.call(rbind, temp_large))
var_means <- cbind(var_means_large, var_means_small)
# generate variable normal distribution standard deviations, use same sd for each variable
var_sds <- c(runif(10, var_sd_min_small, var_sd_max_small), runif(10, var_sd_min_large, var_sd_max_large))  # choose random value from uniform distribution between var_sd_min and var_sd_max
# generate draws from normal distribution for each sample
sim_data <- data.frame()
# for each sample
for(i in 1:samples){
sim_clust = sample(1:true_clust, 1) # choose a random cluster
sim_data[i,1] <- sim_clust
for(j in 1:nVar){
sim_data[i,j+1] <-rnorm(1, mean=var_means[sim_clust,j], sd=var_sds[j]) # generate draw from normal distribution of approporate cluster
}
}
colnames(sim_data) <- c("cluster", paste("var", c(1:nVar), sep=""))
# quick plot of one variable
plot(sim_data$cluster, sim_data$var2)
# quick plot of one variable
plot(sim_data$cluster, sim_data$var1)
# quick plot of one variable
plot(sim_data$cluster, sim_data$var2)
# quick plot of one variable
plot(sim_data$cluster, sim_data$var3)
# quick plot of one variable
plot(sim_data$cluster, sim_data$var4)
# quick plot of one variable
plot(sim_data$cluster, sim_data$var5)
# quick plot of one variable
plot(sim_data$cluster, sim_data$var6)
# quick plot of one variable
plot(sim_data$cluster, sim_data$var7)
# quick plot of one variable
plot(sim_data$cluster, sim_data$var8)
# quick plot of one variable
plot(sim_data$cluster, sim_data$var9)
# quick plot of one variable
plot(sim_data$cluster, sim_data$var10)
# quick plot of one variable
plot(sim_data$cluster, sim_data$var11)
library(ggplot2)
# working directory
wd = "H:/NearLab/PhenoDelimit/example"
# how many clusters to generate?
true_clust = 4
# how many samples total?
samples = 300
# how many variables to generate?
nVar = 20
# small variable sd values
var_sd_min_small = 0.5
var_sd_max_small = 1
# large variable sd values
var_sd_min_large = 3
var_sd_max_large = 10
# large range of variable mean values
var_mean_min_large = 5
var_mean_max_large = 30
# small range of variable mean values
var_mean_min_small = 18
var_mean_max_small = 22
# generate variable normal distribution means
temp_small <- list()
temp_large <- list()
for(i in 1:true_clust){
temp_large[[i]] <- runif(10, var_mean_min_large, var_mean_max_large) # choose random value from uniform distribution between var_mean_min and var_mean_max
}
for(i in 1:true_clust){
temp_small[[i]] <- runif(10, var_mean_min_small, var_mean_max_small) # choose random value from uniform distribution between var_mean_min and var_mean_max
}
var_means_small <- as.data.frame(do.call(rbind, temp_small))
var_means_large <- as.data.frame(do.call(rbind, temp_large))
var_means <- cbind(var_means_large, var_means_small)
# generate variable normal distribution standard deviations, use same sd for each variable
var_sds <- c(runif(10, var_sd_min_small, var_sd_max_small), runif(10, var_sd_min_large, var_sd_max_large))  # choose random value from uniform distribution between var_sd_min and var_sd_max
# generate draws from normal distribution for each sample
sim_data <- data.frame()
# for each sample
for(i in 1:samples){
sim_clust = sample(1:true_clust, 1) # choose a random cluster
sim_data[i,1] <- sim_clust
for(j in 1:nVar){
sim_data[i,j+1] <-rnorm(1, mean=var_means[sim_clust,j], sd=var_sds[j]) # generate draw from normal distribution of approporate cluster
}
}
colnames(sim_data) <- c("cluster", paste("var", c(1:nVar), sep=""))
# quick plot of one variable
plot(sim_data$cluster, sim_data$var11)
# quick plot of one variable
plot(sim_data$cluster, sim_data$var1)
# quick plot of one variable
plot(sim_data$cluster, sim_data$var2)
# quick plot of one variable
plot(sim_data$cluster, sim_data$var3)
# quick plot of one variable
plot(sim_data$cluster, sim_data$var4)
# quick plot of one variable
plot(sim_data$cluster, sim_data$var5)
# quick plot of one variable
plot(sim_data$cluster, sim_data$var6)
# quick plot of one variable
plot(sim_data$cluster, sim_data$var7)
# basic PCA of simulated data, show PC1 and PC2
sim_pca <- prcomp(sim_data[,2:(nVar+1)], center=TRUE, scale=TRUE)
screeplot(sim_pca)
plot_data <- cbind(cluster=as.factor(sim_data$cluster), as.data.frame(sim_pca$x))
p <- ggplot(data=plot_data, aes(x=PC1, y=PC2, color=cluster)) +
geom_point()
p
p <- ggplot(data=plot_data, aes(x=PC1, y=PC3, color=cluster)) +
geom_point()
p
p <- ggplot(data=plot_data, aes(x=PC3, y=PC4, color=cluster)) +
geom_point()
p
p <- ggplot(data=plot_data, aes(x=PC1, y=PC3, color=cluster)) +
geom_point()
p
p <- ggplot(data=plot_data, aes(x=PC1, y=PC2, color=cluster)) +
geom_point()
p
p <- ggplot(data=plot_data, aes(x=PC1, y=PC3, color=cluster)) +
geom_point()
p
p <- ggplot(data=plot_data, aes(x=PC1, y=PC4, color=cluster)) +
geom_point()
p
p <- ggplot(data=plot_data, aes(x=PC1, y=PC5, color=cluster)) +
geom_point()
p
p <- ggplot(data=plot_data, aes(x=PC1, y=PC2, color=cluster)) +
geom_point()
p
setwd(wd)
write.table(sim_data[,2:(nVar+1)], file = "sim_data.txt", quote=FALSE, row.names = FALSE)
# create a few "delimitation models" to test
# ONLY WORKS FOR true_clust=4
# merge clusters 1 + 2 (3 groups total)
m3 <- replace(sim_data$cluster, sim_data$cluster == 1, 2)
# merge clusters 1 + 2 and 3 + 4 (2 groups total)
m2 <- replace(m3, m3==4, 3)
# randomly split cluster 4 into 2 clusters (5 groups total)
m4 <- sim_data$cluster
m4[sample(which(sim_data$cluster == 4), length(which(sim_data$cluster == 4))/2)] <- 5
# randomly take samples from clusters 3 and 4 and create a new cluster (5 groups total)
m5 <- sim_data$cluster
matches <- which(sim_data$cluster == 4 | sim_data$cluster == 3)
m5[sample(matches, length(matches)/2)] <- 5
# keep 4 clusters but randomize cluster assignment (4 groups total)
m6 = sample(sim_data$cluster)
# combine all models and write to file
models <- as.data.frame(cbind(m1=sim_data$cluster, m2=m2, m3=m3, m4=m4, m5=m5, m6=m6))
setwd(wd)
write.table(models, file = "sim_models.txt", quote=FALSE, row.names = FALSE)
